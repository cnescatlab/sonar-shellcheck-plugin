<?xml version="1.0" encoding="UTF-8"?>
<shellchecklint-rules>
	<rule>
		<key>ShellCheck.SC1000</key>
		<name>SC1000 - $ is not used specially and should therefore be escaped.</name>
		<description>
&lt;h1 id="disnotusedspeciallyandshouldthereforebeescaped"&gt;$ is not used specially and should therefore be escaped.&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "$"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "\$"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;$&lt;/code&gt; is special in double quotes, but there are some cases where it's interpreted literally:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Following a backslash: &lt;code&gt;echo "\$"&lt;/code&gt;&lt;/li&gt;

&lt;li&gt;In a context where the shell can't make sense of it, such as at the end of the string, (&lt;code&gt;"foo$"&lt;/code&gt;) or before some constructs (&lt;code&gt;"$'foo'"&lt;/code&gt;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To avoid relying on strange and shell-specific behavior, any &lt;code&gt;$&lt;/code&gt; intended to be literal should be escaped with a backslash.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1001</key>
		<name>SC1001 - This \o will be a regular 'o' in this context.</name>
		<description>
&lt;h2 id="thisowillbearegularointhiscontext"&gt;This &lt;code&gt;\o&lt;/code&gt; will be a regular 'o' in this context.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# Want literal backslash
echo Yay \o/

# Want other characters
bell=\a
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'Yay \o/'

bell="$(printf '\a')"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You have escaped something that has no special meaning when escaped. The backslash will be simply be ignored.&lt;/p&gt;

&lt;p&gt;If the backslash was supposed to be literal, single quote or escape it.&lt;/p&gt;

&lt;p&gt;If you wanted it to expand to something, rewrite the expression to use &lt;code&gt;printf&lt;/code&gt; (or in bash, &lt;code&gt;$'\t'&lt;/code&gt;). If the sequence in question is &lt;code&gt;\n&lt;/code&gt;, &lt;code&gt;\t&lt;/code&gt; or &lt;code&gt;\r&lt;/code&gt;, you instead get a [[SC1012]] that describes this. &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None. ShellCheck (as of 2017-07-03, commit 31bb02d6) will not warn when the first letter of a command is unnecessarily escaped, as this is frequently used to suppress aliases interactively. &lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1003</key>
		<name>SC1003 - Want to escape a single quote? echo 'This is how it'\''s done'.</name>
		<description>
&lt;h2 id="wanttoescapeasinglequoteechothisishowitsdone"&gt;Want to escape a single quote? echo 'This is how it'\''s done'.&lt;/h2&gt;

&lt;p&gt;(Note: in v0.4.6, the error message was accidentally missing the backslash)&lt;/p&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'This is not how it\'s done'.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'This is how it'\''s done'.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale&lt;/h3&gt;

&lt;p&gt;In POSIX shell, the shell cares about nothing but another single quote to terminate the quoted segment. Not even backslashes are interpreted.&lt;/p&gt;

&lt;p&gt;&lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_02_02"&gt;POSIX.1 Shell Command Language ยง 2.2.2 Single Quotes&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Enclosing characters in single-quotes ( &lt;code&gt;''&lt;/code&gt; ) shall preserve the literal value of each character within the single-quotes. A single-quote cannot occur within single-quotes.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you want your single quoted string to end in a backslash, you can rewrite as &lt;code&gt;'string'\\&lt;/code&gt; or [[ignore]] this warning.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1004</key>
		<name>SC1004 - This backslash+linefeed is literal. Break outside single quotes if you just want to break the line.</name>
		<description>
&lt;h2 id="thisbackslashlinefeedisliteralbreakoutsidesinglequotesifyoujustwanttobreaktheline"&gt;This backslash+linefeed is literal. Break outside single quotes if you just want to break the line.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var='This is long \
piece of text'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var='This is a long '\
'piece of text'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You have a single quoted string containing a backslash followed by a linefeed (newline). Unlike double quotes or unquoted strings, this has no special meaning. The string will contain a literal backslash and a linefeed.&lt;/p&gt;

&lt;p&gt;If you wanted to break the line but not add a linefeed to the string, stop the single quote, break the line, and reopen it. This is demonstrated in the correct code.&lt;/p&gt;

&lt;p&gt;If you wanted to break the line and also include the linefeed as a literal, you don't need a backslash:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var='This is a multi-line string
with an embedded linefeed'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you do want a string containing a literal backslash+linefeed combo, such as with &lt;code&gt;sed&lt;/code&gt;, you can [[ignore]] this warning.&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1007</key>
		<name>SC1007 - Remove space after = if trying to assign a value (or for empty string, use var='' ... ).</name>
		<description>
&lt;h1 id="removespaceafteriftryingtoassignavalueorforemptystringusevar"&gt;Remove space after = if trying to assign a value (or for empty string, use var='' ... ).&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# I want programs to show text in dutch!
LANGUAGE= nl
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# I want to run the nl command with English error messages!
LANGUAGE= nl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# I want programs to show text in dutch!
LANGUAGE=nl
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# I want to run the nl command with English error messages!
LANGUAGE='' nl
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;It's easy to think that &lt;code&gt;LANGUAGE= nl&lt;/code&gt; would assign &lt;code&gt;"nl"&lt;/code&gt; to the variable &lt;code&gt;LANGUAGE&lt;/code&gt;. It doesn't.&lt;/p&gt;

&lt;p&gt;Instead, it runs &lt;code&gt;nl&lt;/code&gt; (the "number lines" command) and sets &lt;code&gt;LANGUAGE&lt;/code&gt; to an empty string in its environment.&lt;/p&gt;

&lt;p&gt;Since trying to assign values this way is a common mistake, ShellCheck warns about it and asks you to be explicit when assigning empty strings (except for &lt;code&gt;IFS&lt;/code&gt;, due to the common &lt;code&gt;IFS= read ..&lt;/code&gt; idiom).&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you're familiar with this behavior and feel that the explicit version is unnecessary, you can [[ignore]] it.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1009</key>
		<name>SC1009 - Parser error</name>
		<description>
&lt;p&gt;This page is about how ShellCheck reports parser errors, to aid you in finding problems. If you're getting a parser error for code you know or think is correct, you should &lt;a href="https://github.com/koalaman/shellcheck/issues/new"&gt;submit a bug&lt;/a&gt; with an example!&lt;/p&gt;

&lt;p&gt;When ShellCheck is unable to parse a file, it'll output several errors to help pinpoint the problem:&lt;/p&gt;

&lt;p&gt;Consider this script, with a missing double quote on line 1:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh host "$cmd
echo "Finished"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Bash says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;file: line 2: unexpected EOF while looking for matching `"'
file: line 3: syntax error: unexpected end of file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shellcheck says:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In file line 1:
ssh host "$cmd
^-- SC1009: The mentioned parser error was in this simple command.

In file line 2:
echo "Finished"
^-- SC1073: Couldn't parse this double quoted string.
^-- SC1072: Unexpected eof. Fix any mentioned problems and try again.
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;One error showing the direct problem (SC1072, unexpected eof) &lt;em&gt;(Note: see &lt;a href="../issues/1036"&gt;#1036&lt;/a&gt;)&lt;/em&gt;&lt;/li&gt;

&lt;li&gt;One error showing the construct being parsed (SC1073)&lt;/li&gt;

&lt;li&gt;One info showing the outer construct being parsed (SC1009)&lt;/li&gt;

&lt;li&gt;Potentially some specific suggestions, such as when missing a &lt;code&gt;fi&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here, shellcheck says that the command on line 1 is faulty, which makes it easier to find and fix the actual problem.&lt;/p&gt;

&lt;p&gt;Most of ShellCheck's functionality (specifically, any checks with code &gt;= SC2000) only applies to scripts that parse successfully, so make sure to rerun ShellCheck after fixing any syntax errors.&lt;/p&gt;
		</description>
		<severity>INFO</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1010</key>
		<name>SC1010 - Use semicolon or linefeed before 'done' (or quote to make it literal).</name>
		<description>
&lt;h2 id="usesemicolonorlinefeedbeforedoneorquotetomakeitliteral"&gt;Use semicolon or linefeed before 'done' (or quote to make it literal).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;for f in *; do echo "$f" done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo $f is done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;for f in *; do echo "$f"; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo "$f is done"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;done&lt;/code&gt; only works as a keyword when it's the first token of the command. If added after a command, it will just be the literal word "done". &lt;/p&gt;

&lt;p&gt;This is also true for other keywords like &lt;code&gt;then&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you're intentionally using &lt;code&gt;done&lt;/code&gt; as a literal, you can quote it to make this clear to shellcheck (and also human readers), e.g. instead of &lt;code&gt;echo Task is done&lt;/code&gt;, use &lt;code&gt;echo "Task is done"&lt;/code&gt;. This makes no difference to the shell, but it will silence this warning.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1011</key>
		<name>SC1011 - This apostrophe terminated the single quoted string!</name>
		<description>
&lt;h2 id="thisapostropheterminatedthesinglequotedstring"&gt;This apostrophe terminated the single quoted string!&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'Nothing so needs reforming as other people's habits.'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'Nothing so needs reforming as other people'\''s habits.'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "Nothing so needs reforming as other people's habits."
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;When writing a string in single quotes, you have to make sure that any apostrophes in the text don't accidentally terminate the single quoted string prematurely.&lt;/p&gt;

&lt;p&gt;Escape them properly (see the correct code) or switch quotes to avoid the problem.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1014</key>
		<name>SC1014 - Use 'if cmd; then ..' to check exit code, or 'if [ "$(cmd)" = .. ]' to check output.</name>
		<description>&lt;h2 id="useifcmdthentocheckexitcodeorifdcmdtocheckoutput"&gt;Use 'if cmd; then ..' to check exit code, or 'if [ "$(cmd)" = .. ]' to check output.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if [ grep -q pattern file ]
then
echo "Found a match"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if grep -q pattern file
then
echo "Found a match"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[ .. ]&lt;/code&gt; is not part of shell syntax like &lt;code&gt;if&lt;/code&gt; statements. It is not equivalent to parentheses in C-like languages, &lt;code&gt;if (foo) { bar; }&lt;/code&gt;, and should not be wrapped around commands to test. &lt;/p&gt;

&lt;p&gt;&lt;code&gt;[&lt;/code&gt; is just regular command, like &lt;code&gt;whoami&lt;/code&gt; or &lt;code&gt;grep&lt;/code&gt;, but with a funny name (see &lt;code&gt;ls -l /bin/[&lt;/code&gt;). It's a shorthand for &lt;code&gt;test&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;If you want to check the exit status of a certain command, use that command directly as demonstrated in the correct code.&lt;/p&gt;

&lt;p&gt;If you want to check the output of a command, use &lt;code&gt;"$(..)"&lt;/code&gt; to get its output, and then use &lt;code&gt;test&lt;/code&gt; or  &lt;code&gt;[&lt;/code&gt;/&lt;code&gt;[[&lt;/code&gt; to do a string comparison:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Check output of `whoami` against the string `root`
if [ "$(whoami)" = "root" ]
then
echo "Running as root"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more information, see &lt;a href="http://mywiki.wooledge.org/BashPitfalls#if_.5Bgrep_foo_myfile.5D"&gt;this problem in the Bash Pitfall&lt;/a&gt; list, or generally &lt;a href="http://mywiki.wooledge.org/BashGuide/TestsAndConditionals"&gt;Tests and Conditionals&lt;/a&gt; in the WoolEdge BashGuide &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1015</key>
		<name>SC1015 - This is a unicode double quote. Delete and retype it.</name>
		<description>
&lt;h2 id="thisisaunicodedoublequotedeleteandretypeit"&gt;This is a unicode double quote. Delete and retype it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo โhello worldโ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "hello world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Blog software and word processors frequently replaces ASCII quotes &lt;code&gt;""&lt;/code&gt; with fancy Unicode quotes, &lt;code&gt;โโ&lt;/code&gt;. To bash, Unicode quotes are considered regular literals and not quotes at all.&lt;/p&gt;

&lt;p&gt;Simply delete them and retype them in your editor.&lt;/p&gt;

&lt;h3 id="status"&gt;Status:&lt;/h3&gt;

&lt;p&gt;This error was retired after 0.4.5. In this version and earlier, ShellCheck parsed slanted quotes as a valid double quote. This meant that the warning could not simply be ignored. It has since been replaced by [[SC1110]] (outside quotes) and [[SC1111]] (inside double quotes).&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you really want literal Unicode double quotes, you can put them in single quotes (or Unicode single quotes in double quotes) to make shellcheck ignore them, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf 'Warning: โwakeonlanโ is not installed.\n'
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1016</key>
		<name>SC1016 - This is a Unicode single quote. Delete and retype it.</name>
		<description>
&lt;h2 id="thisisaunicodesinglequotedeleteandretypeit"&gt;This is a Unicode single quote. Delete and retype it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo โhello worldโ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'hello world'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Some software, like OS X, Word and WordPress, may automatically replace your regular quotes with slanted Unicode quotes. Try deleting and retyping them, and/or disable โsmart quotesโ in your editor or OS.&lt;/p&gt;

&lt;h3 id="status"&gt;Status:&lt;/h3&gt;

&lt;p&gt;This error was retired after 0.4.5. In this version and earlier, ShellCheck parsed slanted quotes as a valid double quote. This meant that the warning could not simply be ignored. It has since been replaced by [[SC1110]] (outside quotes) and [[SC1112]] (inside single quotes).&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you want to use typographic single quotes, you can put them in double quotes (or typographic double quotes in single quotes) to make shellcheck ignore them, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf "Warning: โwakeonlanโ is not installed.\n"
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1017</key>
		<name>SC1017 - Literal carriage return. Run script through tr -d '\r' .</name>
		<description>
&lt;h2 id="literalcarriagereturnrunscriptthroughtrdr"&gt;Literal carriage return. Run script through &lt;code&gt;tr -d '\r'&lt;/code&gt; .&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;$ cat -v myscript
#!/bin/sh^M
echo "Hello World"^M
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;$ cat -v myscript
#!/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The script uses Windows/DOS style &lt;code&gt;\r\n&lt;/code&gt; line terminators instead of UNIX style &lt;code&gt;\n&lt;/code&gt; terminators. The additional &lt;code&gt;\r&lt;/code&gt; aka &lt;code&gt;^M&lt;/code&gt; aka carriage return characters will be treated literally, and results in all sorts strange bugs and messages.&lt;/p&gt;

&lt;p&gt;You can verify this with &lt;code&gt;cat -v yourfile&lt;/code&gt; and see whether or not each line ends with a &lt;code&gt;^M&lt;/code&gt;. To delete them, open the file in your editor and save the file as "Unix", "UNIX/OSX Format", &lt;code&gt;:set ff=unix&lt;/code&gt; or similar if it supports it.&lt;/p&gt;

&lt;p&gt;If you don't know how to get your editor to save a file with Unix line terminators, you can use &lt;code&gt;tr&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tr -d '\r' &amp;lt; badscript   &amp;gt; goodscript
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will read a script &lt;code&gt;badscript&lt;/code&gt; with possible carriage returns, and write &lt;code&gt;goodscript&lt;/code&gt; without them.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;

&lt;h3 id="relatedresources"&gt;Related resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mywiki.wooledge.org/BashFAQ/052"&gt;BashFaq: How do I convert a file from DOS format to UNIX format (remove CRs from CR-LF line terminators)?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/39527571/are-shell-scripts-sensitive-to-encoding-and-line-endings"&gt;StackOverflow: Are shell scripts sensitive to encoding and line endings?
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>15min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1018</key>
		<name>SC1018 - This is a unicode non-breaking space. Delete it and retype as space.</name>
		<description>
&lt;h1 id="thisisaunicodenonbreakingspacedeleteitandretypeasspace"&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/h1&gt;

&lt;p&gt;You copy-pasted some code, probably from a blog or web site, which for formatting reasons contained unicode no-break spaces or unicode zero-width spaces instead of regular spaces or in words.&lt;/p&gt;

&lt;p&gt;To humans, a zero-width space is invisible and a non-breaking space is indistinguishable from a regular space, but the shell does not agree.&lt;/p&gt;

&lt;p&gt;If you have just a few, delete the indiciated space/word and retype it. If you have tons, do a search&amp;amp;replace in your editor (copy-paste an offending space into the search field, and type a regular space into the replace field), or use &lt;code&gt;sed -e $'s/\xC2\xA0/ /g' -e $'s/\xE2\x80\x8b//g' -i yourfile&lt;/code&gt; to remove them.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>10min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1020</key>
		<name>SC1020 - You need a space before the if single then "]" else "]]"</name>
		<description>
&lt;h2 id="youneedaspacebeforetheifsinglethenelse"&gt;You need a space before the if single then "]" else "]]"&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if [ "$STUFF" = ""]; then
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;if [ "$STUFF" = "" ]; then
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Bourne shells are very whitespace sensitive. Adding or removing spaces can drastically alter the meaning of a script. In these cases, ShellCheck has noticed that you're missing a space at the position indicated.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;none.&lt;/p&gt;

&lt;h3 id="ignore"&gt;Ignore&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;# shellcheck disable=SC1020
if [ "$STUFF" = ""]; then
...
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1026</key>
		<name>SC1026 - If grouping expressions inside .., use ( .. ).</name>
		<description>
&lt;h2 id="ifgroupingexpressionsinsideuse"&gt;If grouping expressions inside [[..]], use ( .. ).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ [ a || b ] &amp;amp;&amp;amp; c ]]
[ [ a -o b ] -a c ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ ( a || b ) &amp;amp;&amp;amp; c ]]
[ \( a -o b \) -a c ]]  # or  { [ a ] || [ b ]; } &amp;amp;&amp;amp; [ c ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[ .. ]&lt;/code&gt; should not be used to group subexpressions inside &lt;code&gt;[[ .. ]]&lt;/code&gt; or &lt;code&gt;[ .. ]&lt;/code&gt; statements.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;[[ .. ]]&lt;/code&gt;, use regular parentheses.&lt;/p&gt;

&lt;p&gt;For &lt;code&gt;[ .. ]&lt;/code&gt;, either use escaped parentheses, or preferably rewrite the expression into multiple &lt;code&gt;[ .. ]&lt;/code&gt; joined with &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;{ ..; }&lt;/code&gt; groups. The latter is preferred because &lt;code&gt;[ .. ]&lt;/code&gt; is undefined for more than 4 arguments in POSIX.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;

&lt;h3 id="relatedresources"&gt;Related resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mywiki.wooledge.org/BashPitfalls#pf11"&gt;Bash Pitfalls: &lt;code&gt;if [ [ a = b ] &amp;amp;&amp;amp; [ c = d ] ]; then ...&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/test.html"&gt;POSIX &lt;code&gt;test&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1028</key>
		<name>SC1028 - In [..] you have to escape \( \) or preferably combine [..] expressions.</name>
		<description>
&lt;h2 id="inyouhavetoescapeorpreferablycombineexpressions"&gt;In [..] you have to escape \( \) or preferably combine [..] expressions.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ -e ~/.bashrc -a ( -x /bin/dash -o -x /bin/ash ) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;In POSIX:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ -e ~/.bashrc ] &amp;amp;&amp;amp;  { [ -x /bin/dash ] || [ -x /bin/ash ]; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obsolete XSI syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ -e ~/.bashrc -a \( -x /bin/dash -o -x /bin/ash \) ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;[&lt;/code&gt; is implemented as a regular command, so &lt;code&gt;(&lt;/code&gt; is not special.&lt;/p&gt;

&lt;p&gt;The preferred way is not to group inside &lt;code&gt;[ .. ]&lt;/code&gt; and instead compose multiple &lt;code&gt;[ .. ]&lt;/code&gt; statments using the shell's &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt; and &lt;code&gt;{ ..; }&lt;/code&gt; syntax, since this is well defined by POSIX.&lt;/p&gt;

&lt;p&gt;Some shells, such as Bash, support grouping with &lt;code&gt;\( .. \)&lt;/code&gt;, but this is an obsolete XSI-only extension.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1029</key>
		<name>SC1029 - In [[..]] you shouldn't escape ( or ).</name>
		<description>
&lt;h2 id="inyoushouldntescapeor"&gt;In &lt;code&gt;[[..]]&lt;/code&gt; you shouldn't escape &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;)&lt;/code&gt;.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ -e ~/.bashrc -a \( -x /bin/dash -o -x /bin/ash \) ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ -e ~/.bashrc -a ( -x /bin/dash -o -x /bin/ash ) ]]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You don't have to -- and can't -- escape &lt;code&gt;(&lt;/code&gt; or &lt;code&gt;)&lt;/code&gt; inside a &lt;code&gt;[[ .. ]]&lt;/code&gt; expression like you do in &lt;code&gt;[ .. ]&lt;/code&gt;. Just remove the escaping.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1035</key>
		<name>SC1035 - You need a space here</name>
		<description>
&lt;h2 id="youneedaspacehere"&gt;You need a space here&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if ![-z foo ]; then true; fi # if command `[-z' w/ args `foo', `]' fails..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if ! [ -z foo ]; then true; fi # if command `[' w/ args `-z', `foo', `]' fails..
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Bourne shells are very whitespace sensitive. Adding or removing spaces can drastically alter the meaning of a script. In these cases, ShellCheck has noticed that you're missing a space at the position indicated.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;ShellCheck does not understand &lt;a href="https://www.gnu.org/software/bash/manual/html_node/History-Interaction.html"&gt;Bash History Expansion&lt;/a&gt;, an interactive shell feature also using &lt;code&gt;!&lt;/code&gt; (such as &lt;code&gt;!!&lt;/code&gt; to expand to the previous command). &lt;/p&gt;

&lt;p&gt;These features are disabled by default in shells and very rarely used in scripts, but may occasionally be found in interactively sourced files like &lt;code&gt;.bashrc&lt;/code&gt;. Please ignore the error in these cases.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1037</key>
		<name>SC1037 - Braces are required for positionals over 9, e.g. ${10}.</name>
		<description>
&lt;h2 id="bracesarerequiredforpositionalsover9egd10"&gt;Braces are required for positionals over 9, e.g. ${10}.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "Ninth parameter: $9"
echo "Tenth parameter: $10"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "Ninth parameter: $9"
echo "Tenth parameter: ${10}"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;For legacy reasons, &lt;code&gt;$10&lt;/code&gt; is interpreted as the variable &lt;code&gt;$1&lt;/code&gt; followed by the literal string &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Curly braces are needed to tell the shell that both digits are part of the parameter expansion.&lt;/p&gt;

&lt;p&gt;Please note that accessing any positional parameters beyond &lt;code&gt;$9&lt;/code&gt; using &lt;code&gt;${num}&lt;/code&gt; is non-POSIX.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you wanted the trailing digits to be literal, &lt;code&gt;${1}0&lt;/code&gt; will make this clear to both humans and shellcheck.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;dash&lt;/code&gt;, &lt;code&gt;$10&lt;/code&gt; is (&lt;a href="https://gnu.org/s/autoconf/manual/html_node/Shell-Substitutions.html"&gt;wrongly&lt;/a&gt;) interpreted as &lt;code&gt;${10}&lt;/code&gt;, so some 'reversed' care should also be taken:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;bash -c 'set a b c d e f g h i j; echo $10 ${1}0' # POSIX: a0 a0
dash -c 'set a b c d e f g h i j; echo $10 ${1}0' # WRONG: j a0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="relatedresources"&gt;Related resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href="https://mywiki.wooledge.org/BashFAQ/025"&gt;BashFaq: How can I access positional parameters after $9?&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href="https://stackoverflow.com/questions/4912733/how-to-handle-more-than-10-parameters-in-shell"&gt;StackOverflow: How to handle more than 10 parameters in shell
&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1038</key>
		<name>SC1038 - Shells are space sensitive. Use '&lt; &lt;(cmd)', not '&lt;&lt;(cmd)'.</name>
		<description>
&lt;h2 id="shellsarespacesensitiveusecmdnotcmd"&gt;Shells are space sensitive. Use '&amp;lt; &amp;lt;(cmd)', not '&amp;lt;&amp;lt;(cmd)'.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;while IFS= read -r line
do
printf "%q\n" "$line"
done &amp;lt;&amp;lt;(curl -s http://example.com)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;while IFS= read -r line
do
printf "%q\n" "$line"
done &amp;lt;  &amp;lt;(curl -s http://example.com)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You are using &lt;code&gt;&amp;lt;&amp;lt;(&lt;/code&gt; which is an invalid construct.&lt;/p&gt;

&lt;p&gt;You probably meant to redirect &lt;code&gt;&amp;lt;&lt;/code&gt; from process substitution &lt;code&gt;&amp;lt;(..)&lt;/code&gt; instead. To do this, a space is needed between the &lt;code&gt;&amp;lt;&lt;/code&gt; and &lt;code&gt;&amp;lt;(..)&lt;/code&gt;, i.e. &lt;code&gt;&amp;lt; &amp;lt;(cmd)&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1039</key>
		<name>SC1039 - Remove indentation before end token (or use `&lt;&lt;-` and indent with tabs).</name>
		<description>
&lt;h2 id="removeindentationbeforeendtokenoruseandindentwithtabs"&gt;Remove indentation before end token (or use &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; and indent with tabs).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;for f in *.png
do
cat &amp;lt;&amp;lt; EOF
&amp;lt;img src="$f" /&amp;gt;&amp;lt;br/&amp;gt;
EOF
done &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;for f in *.png
do
cat &amp;lt;&amp;lt; EOF
&amp;lt;img src="$f" /&amp;gt;&amp;lt;br/&amp;gt;
EOF
done &amp;gt; index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The here document delimiter will not be recognized if it is indented.&lt;/p&gt;

&lt;p&gt;You can fix it in one of two ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Simply remove the indentation, even though this may break formatting.&lt;/li&gt;

&lt;li&gt;Use &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; instead of &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt;, and indent the script with tabs only (spaces will not be recognized).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Removing the indentation is preferred, since the script won't suddenly break if it's reformatted, copy-pasted, or saved with a different editor.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If the line was supposed to be a literal part of the here document, consider choosing a less ambiguous token.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1040</key>
		<name>SC1040 - When using &amp;lt;&amp;lt;-, you can only indent with tabs.</name>
		<description>
&lt;h2 id="whenusingyoucanonlyindentwithtabs"&gt;When using &amp;lt;&amp;lt;-, you can only indent with tabs.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;p&gt;Any code using &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; that is indented with spaces. &lt;code&gt;cat -T script&lt;/code&gt; shows&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;    cat &amp;lt;&amp;lt;- foo
Hello world
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;Code using &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; must be indented with tabs. &lt;code&gt;cat -T script&lt;/code&gt; shows&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;^Icat &amp;lt;&amp;lt;- foo
^I^IHello world
^Ifoo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or simply don't indent the end token:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;    cat &amp;lt;&amp;lt;- foo
Hello World
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt;, by design, only strips tabs. Not spaces.&lt;/p&gt;

&lt;p&gt;Your editor may be automatically replacing tabs with spaces, either when you type them or when you save the file or both. If you're unable to make it stop, just don't indent the end token.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None. But note that copy-pasting code to &lt;a href="http://www.shellcheck.net"&gt;shellcheck.net&lt;/a&gt; may also turn correct tabs into spaces on some OS.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1041</key>
		<name>SC1041 - Found 'eof' further down, but not on a separate line.</name>
		<description>
&lt;h2 id="foundeoffurtherdownbutnotonaseparateline"&gt;Found 'eof' further down, but not on a separate line.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;Close matches include '-eof' (!= 'eof').
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt;-eof
Hello World
-eof
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt;- eof
Hello World
eof
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Your here document isn't properly terminated.&lt;/p&gt;

&lt;p&gt;There is a line containing the terminator you've chosen, but it's not by itself on a separate line.&lt;/p&gt;

&lt;p&gt;In the example code, the script uses &lt;code&gt;&amp;lt;&amp;lt;-eof&lt;/code&gt;, which is the operator &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt; followed by &lt;code&gt;eof&lt;/code&gt;. The script therefore looks for &lt;code&gt;eof&lt;/code&gt; and skips right past the intended terminator because it starts with a dash.&lt;/p&gt;

&lt;p&gt;You will get some companion SC1042 errors mentioning lines that contain the string as a substring, though they all point to the start of the here document and not the relevant line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In foo line 4:
Hello
^-- SC1041: Found 'eof' further down, but not on a separate line.
^-- SC1042: Close matches include '-eof' (!= 'eof').
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Look at your here document and see which line was supposed to terminate it. Then ensure it matches the token exactly, and that it's on its own line with no text before or after.&lt;/p&gt;

&lt;p&gt;Under Windows the error might occur due to the standard CRLF line-ending, which is Windows-specific.
Try to change the line ending into LF.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Note that SC1041 and SC1042 swapped numbers after v0.4.6 to improve the display order. This rare instance of number reuse was justified by them always occuring together on the same line.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1042</key>
		<name>SC1042 - Found 'eof' further down, but not on a separate line.</name>
		<description>
&lt;pre&gt;&lt;code&gt;Found 'eof' further down, but not on a separate line.
Close matches include '-eof' (!= 'eof').
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See companion error &lt;a href="https://github.com/koalaman/shellcheck/wiki/SC1041"&gt;[SC1041]&lt;/a&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1044</key>
		<name>SC1044 - Couldn't find end token `EOF' in the here document.</name>
		<description>
&lt;h2 id="couldntfindendtokeneofintheheredocument"&gt;Couldn't find end token `EOF' in the here document.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; EOF
Hello World
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; EOF
Hello World
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; here document (aka heredoc) was not properly terminated. The terminating token needs to be on a separate line without indenting (or indented with tabs only when using &lt;code&gt;&amp;lt;&amp;lt;-&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Note that you can not put here documents in one liners. For such use cases, use a &lt;code&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/code&gt; here string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt; EOF  hello world  EOF   # Wrong: data and terminator can not be on the same line
cat &amp;lt;&amp;lt;&amp;lt; "hello world"          # Correct
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;

&lt;h3 id="relatedresources"&gt;Related resources:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Help by adding links to BashFAQ, StackOverflow, man pages, POSIX, etc!&lt;/li&gt;
&lt;/ul&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1045</key>
		<name>SC1045 - It's not 'foo &amp;amp;; bar', just 'foo &amp;amp; bar'.</name>
		<description>
&lt;h1 id="itsnotfoobarjustfoobar"&gt;It's not 'foo &amp;amp;; bar', just 'foo &amp;amp; bar'.&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo &amp;amp;; bar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo &amp;amp; bar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Both &lt;code&gt;&amp;amp;&lt;/code&gt; and &lt;code&gt;;&lt;/code&gt; terminate the command. You should only use one of them.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1046</key>
		<name>SC1046 - Couldn't find 'fi' for this 'if'</name>
		<description>
			&lt;h1 id="couldntfindfiforthisif"&gt;Couldn't find 'fi' for this 'if'&lt;/h1&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1048</key>
		<name>SC1048 - Can't have empty then clauses (use 'true' as a no-op).</name>
		<description>
&lt;h2 id="canthaveemptythenclausesusetrueasanoop"&gt;Can't have empty then clauses (use 'true' as a no-op).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if [ -e foo ]
then
# TODO: handle this
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if [ -e foo ]
then
# TODO: handle this
true
fi

# Or use the no-op colon operator ":"
if [ -e foo ]
then
# TODO: handle this
:
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Shells do not allow empty &lt;code&gt;then&lt;/code&gt; clauses. They need at least one command (and comments are not commands).&lt;/p&gt;

&lt;p&gt;If you want a &lt;code&gt;then&lt;/code&gt; clause that does nothing, use a dummy command like &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1049</key>
		<name>SC1049 - Did you forget the 'then' for this 'if'?</name>
		<description>
&lt;h2 id="didyouforgetthethenforthisif"&gt;Did you forget the 'then' for this 'if'?&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true
echo "foo"
elif true
echo "bar"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true
then
echo "foo"
elif true
then
echo "bar"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck found a parsing error in the script, and determined that it's most likely due to a missing &lt;code&gt;then&lt;/code&gt; keyword for the &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; indicated.&lt;/p&gt;

&lt;p&gt;Make sure the &lt;code&gt;then&lt;/code&gt; is there. &lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;then&lt;/code&gt; needs a &lt;code&gt;;&lt;/code&gt; or linefeed before it. &lt;code&gt;if true then&lt;/code&gt; is invalid, while &lt;code&gt;if true; then&lt;/code&gt; is correct.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1051</key>
		<name>SC1051 - Semicolons directly after 'then' are not allowed. Just remove it.</name>
		<description>
&lt;h2 id="semicolonsdirectlyafterthenarenotallowedjustremoveit"&gt;Semicolons directly after 'then' are not allowed. Just remove it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true; then; echo "Hi"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true; then echo "Hi"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;then&lt;/code&gt; keywords should not be followed by semicolons. It's not valid shell syntax.&lt;/p&gt;

&lt;p&gt;You can follow them directly with a line break or another command.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1052</key>
		<name>SC1052 - Semicolons directly after 'then' are not allowed. Just remove it. </name>
		<description>
&lt;h2 id="semicolonsdirectlyafterthenarenotallowedjustremoveit"&gt;Semicolons directly after 'then' are not allowed. Just remove it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true; then; echo "Hi"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true; then echo "Hi"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;then&lt;/code&gt; keywords should not be followed by semicolons. It's not valid shell syntax.&lt;/p&gt;

&lt;p&gt;You can follow them directly with a line break or another command.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1053</key>
		<name>SC1053 - Semicolons directly after 'else' are not allowed. Just remove it.</name>
		<description>
&lt;h2 id="semicolonsdirectlyafterelsearenotallowedjustremoveit"&gt;Semicolons directly after 'else' are not allowed. Just remove it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if mycommand; then echo "True"; else; echo "False"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if mycommand; then echo "True"; else echo "False"; fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;else&lt;/code&gt; keywords should not be followed by semicolons. It's not valid shell syntax.&lt;/p&gt;

&lt;p&gt;You can follow them directly with a line break or another command.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1054</key>
		<name>SC1054 - You need a space after the '{'.</name>
		<description>
&lt;h2 id="youneedaspaceafterthe"&gt;You need a space after the '{'.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() {echo "hello world;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() { echo "hello world;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;{&lt;/code&gt; is only recognized as the start of a command group when it's a separate token.&lt;/p&gt;

&lt;p&gt;If it's not a separate token, like in the problematic example, it will be considered a literal character, as if writing &lt;code&gt;"{echo"&lt;/code&gt; with quotes, and therefore usually cause a syntax error.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1064</key>
		<name>SC1064 - Expected a { to open the function definition.</name>
		<description>
&lt;h2 id="expectedatoopenthefunctiondefinition"&gt;Expected a { to open the function definition.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() {
echo "hello world"
}
foo()
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() {
echo "hello world"
}
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck found what appears to be the start of a function definition, but without a function body.&lt;/p&gt;

&lt;p&gt;One common cause is that you are trying to call a function by appending parentheses, e.g. &lt;code&gt;foo()&lt;/code&gt; like in C. Bash does not use or allow parentheses after a function name to call it. The function &lt;code&gt;foo&lt;/code&gt; should be called using just &lt;code&gt;foo&lt;/code&gt; like in the example. &lt;/p&gt;

&lt;p&gt;If you are declaring a function, make sure it looks like the correct code above, and that it does not try to declare any parameters (parameters are instead accessed with &lt;code&gt;$1&lt;/code&gt; and up). &lt;/p&gt;

&lt;p&gt;If you are trying to do something else, look up the syntax for what you are trying to do.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;POSIX allows the body of a function to be any compound command, e.g. &lt;code&gt;foo() for i; do :; done&lt;/code&gt;. Since this usage is rare, ShellCheck requires the body to be {} (or ()). This additional structure requirement helps improve error messages and suggestions by not parsing down a path that less advanced users wouldn't expect.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1065</key>
		<name>SC1065 - Trying to declare parameters? Don't. Use () and refer to params as $1, $2..</name>
		<description>
&lt;h2 id="tryingtodeclareparametersdontuseandrefertoparamsasd1d2"&gt;Trying to declare parameters? Don't. Use () and refer to params as $1, $2..&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo(input) {
echo "$input"
}
foo("hello world");
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() {
echo "$1"
}
foo "hello world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Shell script functions behave just like scripts and other commands:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;They always take a 0 to N parameters, referred to with &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc. They can not declare parameters by name.&lt;/li&gt;

&lt;li&gt;They are executed using &lt;code&gt;name arg1 arg2&lt;/code&gt;, and not with parentheses as C-like languages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1066</key>
		<name>SC1066 - Don't use $ on the left side of assignments.</name>
		<description>
&lt;h2 id="dontusedontheleftsideofassignments"&gt;Don't use $ on the left side of assignments.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;$greeting="Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;greeting="Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, if the goal was to assign to a variable whose name is in another variable (indirection), use &lt;code&gt;declare&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;name=foo
declare "$name=hello world"
echo "$foo"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Unlike Perl or PHP, &lt;code&gt;$&lt;/code&gt; is not used when assigning to a variable.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1068</key>
		<name>SC1068 - Don't put spaces around the = in assignments.</name>
		<description>
&lt;h1 id="dontputspacesaroundtheinassignments"&gt;Don't put spaces around the = in assignments.&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo = 42
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo=42
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Shells are space sensitive. &lt;code&gt;foo=42&lt;/code&gt; means to assign &lt;code&gt;42&lt;/code&gt; to the variable &lt;code&gt;foo&lt;/code&gt;. &lt;code&gt;foo = 42&lt;/code&gt; means to run a command named &lt;code&gt;foo&lt;/code&gt;, and pass &lt;code&gt;=&lt;/code&gt; as &lt;code&gt;$1&lt;/code&gt; and &lt;code&gt;42&lt;/code&gt; as &lt;code&gt;$2&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you actually wanted to run a command named foo and provide &lt;code&gt;=&lt;/code&gt; as the first argument, simply quote it to make ShellCheck be quiet: &lt;code&gt;foo "=" 42&lt;/code&gt;.&lt;/p&gt;
</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1071</key>
		<name>ShellCheck.SC1071</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1072</key>
		<name>SC1072 - Unexpected parse error</name>
		<description>
&lt;h1 id="unexpected"&gt;Unexpected ..&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Note: There is a &lt;a href="../issues/1036"&gt;known bug&lt;/a&gt; in the current version when &lt;a href="../wiki/Directive"&gt;directives&lt;/a&gt; appear within &lt;code&gt;then&lt;/code&gt; clauses of &lt;code&gt;if&lt;/code&gt; blocks that causes Shellcheck to report SC1072 on otherwise valid code. Avoid using directives within &lt;code&gt;then&lt;/code&gt; clauses - instead place them at the top of the &lt;code&gt;if&lt;/code&gt; block or another enclosing block. This is fixed on the &lt;a href="https://www.shellcheck.net/"&gt;online version&lt;/a&gt; and the next release.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;See &lt;a href="https://github.com/koalaman/shellcheck/wiki/Parser-Error"&gt;Parser Error&lt;/a&gt;.&lt;/p&gt;
		</description>
		<severity>MINOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1073</key>
		<name>ShellCheck.SC1073</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1075</key>
		<name>SC1075 - Use 'elif' instead of 'else if'.</name>
		<description>
&lt;h2 id="useelifinsteadofelseif"&gt;Use 'elif' instead of 'else if'.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if [ "$#" -eq 0 ]
then
echo "Usage: ..."
else if [ "$#" -lt 2 ]
then
echo "Missing operand"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if [ "$#" -eq 0 ]
then
echo "Usage: ..."
elif [ "$#" -lt 2 ]
then
echo "Missing operand"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Many languages allow alternate branches with &lt;code&gt;else if&lt;/code&gt;, but &lt;code&gt;sh&lt;/code&gt; is not one of them. Use &lt;code&gt;elif&lt;/code&gt; instead.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;else if&lt;/code&gt; is a valid (though confusing) way of nesting an &lt;code&gt;if&lt;/code&gt; statement in a parent's &lt;code&gt;else&lt;/code&gt;. If this is your intention, please use canonical formatting and put a linefeed between &lt;code&gt;else&lt;/code&gt; and &lt;code&gt;if&lt;/code&gt;. &lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if x
then
echo "x"
else     # line break here
if y
then
echo "y"
fi
fi
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1077</key>
		<name>SC1077 - For command expansion, the tick should slant left (` vs ยด).</name>
		<description>
&lt;h1 id="forcommandexpansionthetickshouldslantleftvs"&gt;For command expansion, the tick should slant left (` vs ยด).&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "Your username is ยดwhoamiยด"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "Your username is $(whoami)" # Preferred
echo "Your username is `whoami`"  # Deprecated, will give [SC2006]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;In some fonts it's hard to tell ticks apart, but Bash strongly distinguishes between backticks (grave accent &lt;code&gt;`&lt;/code&gt;), forward ticks (acute accent &lt;code&gt;ยด&lt;/code&gt;) and regular ticks (apostrophe &lt;code&gt;'&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Backticks start command expansions, while forward ticks are literal. To help spot bugs, ShellCheck parses backticks and forward ticks interchangeably.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you want to write out literal forward ticks, such as fancyful ascii quotation marks:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "``Proprietary software is an injustice.ยดยด  - Richard Stallman"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;use single quotes instead:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo '``Proprietary software is an injustice.ยดยด  - Richard Stallman'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To nest forward ticks in command expansion, use &lt;code&gt;$(..)&lt;/code&gt; instead of &lt;code&gt;`..`&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1078</key>
		<name>SC1078 - Did you forget to close this double quoted string?</name>
		<description>
&lt;h1 id="didyouforgettoclosethisdoublequotedstring"&gt;Did you forget to close this double quoted string?&lt;/h1&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;greeting="hello
target="world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;greeting="hello"
target="world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The first line is missing a quote.&lt;/p&gt;

&lt;p&gt;ShellCheck warns when it detects multi-line double quoted, single quoted or backticked strings when the character that follows it looks out of place (and gives a companion warning [[SC1079]] at that spot).&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you do want a multiline variable, just make sure the character after it is a quote, space or line feed.&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var='multiline
'value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;can be rewritten for readability and to remove the warning:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var='multiline
value'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As always &lt;code&gt;`..`&lt;/code&gt; should be rewritten to &lt;code&gt;$(..)&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1079</key>
		<name>SC1079 - This is actually an end quote, but due to next char it looks suspect.</name>
		<description>
&lt;h2 id="thisisactuallyanendquotebutduetonextcharitlookssuspect"&gt;This is actually an end quote, but due to next char it looks suspect.&lt;/h2&gt;

&lt;p&gt;See companion warning &lt;a href="https://github.com/koalaman/shellcheck/wiki/SC1078"&gt;SC1078&lt;/a&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1081</key>
		<name>SC1081 - Scripts are case sensitive. Use 'if', not 'If'.</name>
		<description>
&lt;h2 id="scriptsarecasesensitiveuseifnotif"&gt;Scripts are case sensitive. Use 'if', not 'If'.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;If true
Then
echo "hello"
Fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;if true
then
echo "hello"
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Shells are case sensitive and do not accept &lt;code&gt;If&lt;/code&gt; or &lt;code&gt;IF&lt;/code&gt; in place of lowercase &lt;code&gt;if&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you're aware of this and insist on naming a function &lt;code&gt;WHILE&lt;/code&gt;, you can quote the name to prevent shellcheck from thinking you meant &lt;code&gt;while&lt;/code&gt;. Or if you really want the names, add things like &lt;code&gt;alias If=if IF=if&lt;/code&gt; to replace those keywords and ask shellcheck to ignore them.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1082</key>
		<name>SC1082 - This file has a UTF-8 BOM. Remove it with: LC_CTYPE=C sed '1s/^...//' &amp;lt; yourscript .</name>
		<description>
&lt;h2 id="thisfilehasautf8bomremoveitwithlc_ctypecsed1syourscript"&gt;This file has a UTF-8 BOM. Remove it with: LC_CTYPE=C sed '1s/^...//' &amp;lt; yourscript .&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;p&gt;This is an encoding error that can't be seen in the script itself, but &lt;code&gt;cat -v&lt;/code&gt; will show three bytes of garbage at the start of the file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat -v file
M-oM-;M-?#!/bin/bash
echo "hello world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;The code is correct when this garbage does not appear.&lt;/p&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Some editors may save a file with a &lt;a href="https://en.wikipedia.org/wiki/Byte_order_mark"&gt;Byte Order Mark&lt;/a&gt; to mark the file as UTF-8. Shells do not understand this and will give errors on the first line:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ bash myscript
myscript: line 1: #!/bin/sh: No such file or directory

$ dash myscript
myscript: 1: myscript: #!/bin/sh: not found
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To fix it, remove the byte order mark. One way of doing this is &lt;code&gt;LC_CTYPE=C sed '1s/^...//' &amp;lt; yourscript&lt;/code&gt;. Verify that it's not there with &lt;code&gt;cat -v&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1083</key>
		<name>SC1083 - This &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n?&lt;/code&gt;) or quote it.</name>
		<description>
&lt;h2 id="thisisliteralcheckexpressionmissingnorquoteit"&gt;This &lt;code&gt;{&lt;/code&gt;/&lt;code&gt;}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n?&lt;/code&gt;) or quote it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;rmf() { rm -f "$@" }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;eval echo \${foo}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;rmf() { rm -f "$@"; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;eval "echo \${foo}"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Curly brackets are normally used as syntax in parameter expansion, command grouping and brace expansion.&lt;/p&gt;

&lt;p&gt;However, if they don't appear alone at the start of an expression or as part of a parameter or brace expansion, the shell silently treats them as literals. This frequently indicates a bug, so ShellCheck warns about it.&lt;/p&gt;

&lt;p&gt;In the example function, the &lt;code&gt;}&lt;/code&gt; is literal because it's not at the start of an expression. We fix it by adding a &lt;code&gt;;&lt;/code&gt; before it.&lt;/p&gt;

&lt;p&gt;In the example eval, the code works fine. However, we can quiet the warning and follow good practice by adding quotes around the literal data.&lt;/p&gt;

&lt;p&gt;ShellCheck does not warn about &lt;code&gt;{}&lt;/code&gt;, since this is frequently used with &lt;code&gt;find&lt;/code&gt; and rarely indicates a bug.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;This error is harmless when the curly brackets are supposed to be literal, in e.g. &lt;code&gt;awk {'print $1'}&lt;/code&gt;. However, it's cleaner and less error prone to simply include them inside the quotes: &lt;code&gt;awk '{print $1}'&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1084</key>
		<name>SC1084 - Use #!, not !#, for the shebang.</name>
		<description>
&lt;h2 id="usenotfortheshebang"&gt;Use #!, not !#, for the shebang.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;!#/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#!/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The shebang has been accidentally swapped. The &lt;code&gt;#&lt;/code&gt; should come first: &lt;code&gt;#!&lt;/code&gt;, not &lt;code&gt;!#&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1086</key>
		<name>SC1086 - Don't use $ on the iterator name in for loops.</name>
		<description>
&lt;h2 id="dontusedontheiteratornameinforloops"&gt;Don't use $ on the iterator name in for loops.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;for $var in *
do
echo "$var"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;for var in *
do
echo "$var"
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The variable is named &lt;code&gt;var&lt;/code&gt;, and can be expanded to its value with &lt;code&gt;$var&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;for&lt;/code&gt; loop expects the variable's name, not its value (and the name can not be specified indirectly).&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1087</key>
		<name>SC1087 - "Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet)."</name>
		<description>
			&lt;h2 id="usebraceswhenexpandingarraysegdarrayidxordvartoquiet"&gt;"Use braces when expanding arrays, e.g. ${array[idx]} (or ${var}[.. to quiet)."&lt;/h2&gt;

			&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

			&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "$array[@]"
			&lt;/code&gt;&lt;/pre&gt;

			&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

			&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "${array[@]}"
			&lt;/code&gt;&lt;/pre&gt;

			&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

			&lt;p&gt;Some languages use the syntax &lt;code&gt;$array[index]&lt;/code&gt; to access an index of an arrays, but a shell will interpret this as &lt;code&gt;$array&lt;/code&gt; followed by the unrelated literal string (or glob) &lt;code&gt;[index]&lt;/code&gt;.&lt;/p&gt;

			&lt;p&gt;Curly braces are needed to tell the shell that the square brackets are part of the expansion.&lt;/p&gt;

			&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

			&lt;p&gt;If you want the square brackets to be treated literally or as a glob, use &lt;code&gt;${var}[idx]&lt;/code&gt; to prevent this warning.&lt;/p&gt;

			&lt;p&gt;This does not change how the script works, but clarifies your intent to ShellCheck as well as other programmers.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1088</key>
		<name>SC1088 - Parsing stopped here. Invalid use of parentheses?</name>
		<description>
&lt;h2 id="parsingstoppedhereinvaliduseofparentheses"&gt;Parsing stopped here. Invalid use of parentheses?&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;grep ^(.*)\1$ file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var = myfunction(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;grep '^(.*)\1$' file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=$(myfunction value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Parentheses are shell syntax and must be used correctly.&lt;/p&gt;

&lt;p&gt;For commands that expect literal parentheses, such as &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt;, the parentheses need to be quoted or escaped so the shell does not interpret them, but instead passes them to the command.&lt;/p&gt;

&lt;p&gt;For shell syntax, the shell does not use them the way most other languages do, so avoid guessing at syntax based on previous experience. In particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parentheses are NOT used to call functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are NOT used to group expressions, except in arithmetic contexts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are NOT used in conditional statements or loops.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are used differently in different contexts. &lt;code&gt;( .. )&lt;/code&gt;, &lt;code&gt;$( .. )&lt;/code&gt;, &lt;code&gt;$(( .. ))&lt;/code&gt; and &lt;code&gt;var=(..)&lt;/code&gt; are completely separate and independent structures with different meanings, and can not be broken down into operations on expressions in parentheses.&lt;/p&gt;

&lt;p&gt;In C-like languages, &lt;code&gt;++&lt;/code&gt; can't be broken down into two &lt;code&gt;+&lt;/code&gt; operations, so you can't e.g. use &lt;code&gt;+ +&lt;/code&gt; or &lt;code&gt;+(+)&lt;/code&gt;. In the same way, all of the above are completely unrelated so that you can't do &lt;code&gt;$(1+1)&lt;/code&gt; or &lt;code&gt;$( (1+1) )&lt;/code&gt; in place of &lt;code&gt;$(( 1+1 ))&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are trying to use parentheses for shell syntax, look up the actual syntax of the statement you are trying to use.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1089</key>
		<name>SC1089 - Parsing stopped here. Invalid use of parentheses?</name>
		<description>
&lt;h2 id="parsingstoppedhereinvaliduseofparentheses"&gt;Parsing stopped here. Invalid use of parentheses?&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;grep ^(.*)\1$ file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var = myfunction(value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;grep '^(.*)\1$' file
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=$(myfunction value)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Parentheses are shell syntax and must be used correctly.&lt;/p&gt;

&lt;p&gt;For commands that expect literal parentheses, such as &lt;code&gt;grep&lt;/code&gt; or &lt;code&gt;find&lt;/code&gt;, the parentheses need to be quoted or escaped so the shell does not interpret them, but instead passes them to the command.&lt;/p&gt;

&lt;p&gt;For shell syntax, the shell does not use them the way most other languages do, so avoid guessing at syntax based on previous experience. In particular:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Parentheses are NOT used to call functions.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are NOT used to group expressions, except in arithmetic contexts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are NOT used in conditional statements or loops.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Parentheses are used differently in different contexts. &lt;code&gt;( .. )&lt;/code&gt;, &lt;code&gt;$( .. )&lt;/code&gt;, &lt;code&gt;$(( .. ))&lt;/code&gt; and &lt;code&gt;var=(..)&lt;/code&gt; are completely separate and independent structures with different meanings, and can not be broken down into operations on expressions in parentheses.&lt;/p&gt;

&lt;p&gt;In C-like languages, &lt;code&gt;++&lt;/code&gt; can't be broken down into two &lt;code&gt;+&lt;/code&gt; operations, so you can't e.g. use &lt;code&gt;+ +&lt;/code&gt; or &lt;code&gt;+(+)&lt;/code&gt;. In the same way, all of the above are completely unrelated so that you can't do &lt;code&gt;$(1+1)&lt;/code&gt; or &lt;code&gt;$( (1+1) )&lt;/code&gt; in place of &lt;code&gt;$(( 1+1 ))&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you are trying to use parentheses for shell syntax, look up the actual syntax of the statement you are trying to use.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1090</key>
		<name>SC1090 - Can't follow non-constant source. Use a directive to specify location.</name>
		<description>
&lt;h2 id="cantfollownonconstantsourceuseadirectivetospecifylocation"&gt;Can't follow non-constant source. Use a directive to specify location.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;. "$(find_install_dir)/lib.sh"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# shellcheck source=src/lib.sh
. "$(find_install_dir)/lib.sh"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck is not able to include sourced files from paths that are determined at runtime. The file will not be read, potentially resulting in warnings about unassigned variables and similar.&lt;/p&gt;

&lt;p&gt;Use a &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;Directive&lt;/a&gt; to point shellcheck to a fixed location it can read instead.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you don't care that ShellCheck is unable to account for the file, specify &lt;code&gt;# shellcheck source=/dev/null&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1091</key>
		<name>SC1091 - Not following: (error message here)</name>
		<description>
&lt;h2 id="notfollowingerrormessagehere"&gt;Not following: (error message here)&lt;/h2&gt;

&lt;p&gt;Reasons include: file not found, no permissions, not included on the command line, not allowing &lt;code&gt;shellcheck&lt;/code&gt; to follow files with &lt;code&gt;-x&lt;/code&gt;, etc.&lt;/p&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;source somefile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# shellcheck disable=SC1091
source somefile
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck, for whichever reason, is not able to access the source file.&lt;/p&gt;

&lt;p&gt;This could be because you did not include it on the command line, did not use &lt;code&gt;shellcheck -x&lt;/code&gt; to allow following other files, don't have permissions or a variety of other problems.&lt;/p&gt;

&lt;p&gt;Feel free to ignore the error with a &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;directive&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you're fine with it, ignore the message with a &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;directive&lt;/a&gt;.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1094</key>
		<name>SC1094 - Parsing of sourced file failed. Ignoring it.</name>
		<description>
&lt;h2 id="parsingofsourcedfilefailedignoringit"&gt;Parsing of sourced file failed. Ignoring it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;source mylib
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# shellcheck disable=SC1094
source mylib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(or fix &lt;code&gt;mylib&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck encountered a parsing error in a sourced file, &lt;code&gt;mylib&lt;/code&gt; in the example.&lt;/p&gt;

&lt;p&gt;Fix parsing error, or just disable it with a directive.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If the file is fine and this is due to a known &lt;code&gt;shellcheck&lt;/code&gt; bug, you can ignore it with a &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;directive&lt;/a&gt; as in the example.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>20min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1095</key>
		<name>SC1095 - You need a space or linefeed between the function name and body.</name>
		<description>
&lt;h2 id="youneedaspaceorlinefeedbetweenthefunctionnameandbody"&gt;You need a space or linefeed between the function name and body.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;function foo{
echo "hello world"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;Prefer POSIX syntax:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo() {
echo "hello world"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, add the missing space between function name and opening &lt;code&gt;{&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#           v-- Here
function foo {
echo "hello world"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;When using &lt;code&gt;function&lt;/code&gt; keyword function definitions without &lt;code&gt;()&lt;/code&gt;, a space is required between the function name and the opening &lt;code&gt;{&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1097</key>
		<name>SC1097 - Unexpected ==. For assignment, use =. For comparison, use [/[[.</name>
		<description>
&lt;h2 id="unexpectedforassignmentuseforcomparisonuse"&gt;Unexpected ==. For assignment, use =. For comparison, use [/[[.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var==value
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;Assignment:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comparison:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ "$var" = value ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck has noticed that you're using &lt;code&gt;==&lt;/code&gt; in an unexpected way. The two most common reasons for this is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;You wanted to assign a value but accidentally used &lt;code&gt;==&lt;/code&gt; instead of &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You wanted to compare two values, but neglected to use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you wanted to assign a literal equals sign, use quotes to make this clear:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var="=sum(A1:A10)"
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1098</key>
		<name>SC1098 - Quote/escape special characters when using eval, e.g. eval "a=(b)".</name>
		<description>
&lt;h2 id="quoteescapespecialcharacterswhenusingevalegevalab"&gt;Quote/escape special characters when using eval, e.g. eval "a=(b)".&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;eval $var=(a b)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;eval "$var=(a b)"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Shells differ widely in how they handle unescaped parentheses in &lt;code&gt;eval&lt;/code&gt; expressions.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;eval foo=bar&lt;/code&gt; is allowed by dash, bash and ksh.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;eval foo=(bar)&lt;/code&gt; is allowed by bash and ksh, but not dash.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;eval $var=(bar)&lt;/code&gt; is allowed by ksh, but not bash or dash.&lt;/li&gt;

&lt;li&gt;&lt;code&gt;eval foo() ( echo bar; )&lt;/code&gt; is not allowed by any shell.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Since the expression is evaluated as shell script code anyways, it should be passed in as a literal string without relying on special case parsing rules in the target shell. Quote/escape the characters accordingly.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1099</key>
		<name>SC1099 - You need a space before the #.</name>
		<description>
&lt;h2 id="youneedaspacebeforethe"&gt;You need a space before the #.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;while sleep 1
do# show time
date
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;while sleep 1
do # show time
date
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck has noticed that you have a keyword immediately followed by a &lt;code&gt;#&lt;/code&gt;. In order for the &lt;code&gt;#&lt;/code&gt; to start a comment, it needs to come after a word boundary such as a space.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1100</key>
		<name>SC1100 - This is a unicode dash. Delete and retype as ASCII minus.</name>
		<description>
&lt;h2 id="thisisaunicodedashdeleteandretypeasasciiminus"&gt;This is a unicode dash. Delete and retype as ASCII minus.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ 3 โgt 2 ]] # Uses unicode en-dash character
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[[ 3 -gt 2 ]] # Uses regular ASCII hyphen-minus character
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;A character that looks similar to &lt;code&gt;-&lt;/code&gt; has made its way into your code. This is usually due to copy-pasting from blogs and other websites that formatted code as text, replacing the ASCII hyphen-minus with a Unicode dash character.&lt;/p&gt;

&lt;p&gt;To fix it, simply delete and retype it.&lt;/p&gt;

&lt;p&gt;For a large script, you can use your editor's Search&amp;amp;Replace by copy-pasting the bad dash.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None. If you want a literal Unicode dash character, just quote it.&lt;/p&gt;
		</description>
		<severity>CRITICAL</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1101</key>
		<name>SC1101 - Delete trailing spaces after \ to break line (or use quotes for literal space).</name>
		<description>
&lt;h2 id="deletetrailingspacesaftertobreaklineorusequotesforliteralspace"&gt;Delete trailing spaces after \ to break line (or use quotes for literal space).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# There are spaces after the backslash:
echo hello \
world
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# No spaces after the backslash:
echo hello \
world
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;To break a line you can use &lt;code&gt;\&lt;/code&gt; before the line break. However, if there are spaces after the backslash, the escape will apply to them instead of the line break, and the command will not continue on the next line.&lt;/p&gt;

&lt;p&gt;Delete the trailing spaces to make the line break work correctly.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you do want a literal escaped space at the end of a line you can ignore this error, but please reconsider and use quotes instead. Trailing whitespace is invisible and frequently stripped on purpose (by editor settings / precommits) or accident (copy-paste), and so should not be relied upon for correctness.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1102</key>
		<name>SC1102 - Shells disambiguate $(( differently or not at all. If the first $( should start command substitution, add a space after it.</name>
		<description>
&lt;h2 id="shellsdisambiguateddifferentlyornotatallifthefirstdshouldstartcommandsubstitutionaddaspaceafterit"&gt;Shells disambiguate $(( differently or not at all. If the first $( should start command substitution, add a space after it.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "$((cmd "$@") 2&amp;gt;&amp;amp;1)"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "$( (cmd "$@") 2&amp;gt;&amp;amp;1)"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You appear to be using &lt;code&gt;$((&lt;/code&gt; with two (or more) parentheses in a row, where the first &lt;code&gt;$(&lt;/code&gt; should open a subshell. &lt;/p&gt;

&lt;p&gt;This is an ill-defined structure that is parsed differently between different shells and shell versions. Prefer adding spaces to make it unambiguous, both to shells and humans.&lt;/p&gt;

&lt;p&gt;Consider the &lt;code&gt;$(((&lt;/code&gt; in &lt;code&gt;$(((1)) )&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;Ash, dash and Bash 1 parses it as &lt;code&gt;$(( (&lt;/code&gt; and subsequently fail to find the matching &lt;code&gt;))&lt;/code&gt;. Zsh and Bash 2+ looks ahead and parses it as &lt;code&gt;$( ((&lt;/code&gt;. Ksh parses it as &lt;code&gt;$( ( (&lt;/code&gt;. &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Alternatively&lt;/strong&gt;, you may indeed have correctly spaced your parentheses, but ShellCheck failed to parse &lt;code&gt;$((&lt;/code&gt; as an arithmetic expression while accidentally succeeding in parsing it as &lt;code&gt;$(&lt;/code&gt; + &lt;code&gt;(&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;In these cases, double check the syntax to ensure ShellCheck can parse the &lt;code&gt;$((&lt;/code&gt;, or ignore this error and hope that it won't affect analysis too severely. &lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1104</key>
		<name>SC1104 - Use #!, not just !, for the shebang.</name>
		<description>
&lt;h2 id="usenotjustfortheshebang"&gt;Use #!, not just !, for the shebang.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;!/bin/sh
echo "Hello"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#!/bin/sh
echo "Hello"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You appear to be specifying an interpreter in a shebang, but it's missing the hash part. The shebang must always start with &lt;code&gt;#!&lt;/code&gt;. &lt;/p&gt;

&lt;p&gt;Even the name "shebang" itself comes from "hash" (&lt;code&gt;#&lt;/code&gt;) + "bang" (&lt;code&gt;!&lt;/code&gt;). &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1105</key>
		<name>SC1105 - Shells disambiguate (( differently or not at all. If the first ( should start a subshell, add a space after it.</name>
		<description>
			&lt;h2 id="shellsdisambiguatedifferentlyornotatallifthefirstshouldstartasubshelladdaspaceafterit"&gt;Shells disambiguate (( differently or not at all. If the first ( should start a subshell, add a space after it.&lt;/h2&gt;

			&lt;p&gt;See &lt;a href="https://github.com/koalaman/shellcheck/wiki/SC1102"&gt;SC1102&lt;/a&gt;, the similar warning for ambiguous &lt;code&gt;$((&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1107</key>
		<name>SC1107 - This directive is unknown. It will be ignored.</name>
		<description>
&lt;h2 id="thisdirectiveisunknownitwillbeignored"&gt;This directive is unknown. It will be ignored.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# shellcheck foobar=baz
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;Depends on your intention.&lt;/p&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;ShellCheck doesn't recognize the &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;directive&lt;/a&gt; you're trying to use in a &lt;code&gt;# shellcheck&lt;/code&gt; comment. See the &lt;a href="https://github.com/koalaman/shellcheck/wiki/Directive"&gt;Directive&lt;/a&gt;s page for supported directives.&lt;/p&gt;

&lt;p&gt;It could be misspelled, or you could be using an older version of shellcheck that doesn't support it yet.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None. If you wish to ignore this warning and continue without it, you need version 0.4.5 (commit 88c56ec) or later and a command grouping:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Ignore an unrecognized directive in 0.4.5 or later:
# shellcheck disable=SC1107
{
# shellcheck unrecognized=directive
echo "Hello World"
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Before 0.4.5, unrecognized directives are considered parse errors.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1108</key>
		<name>SC1108 - You need a space before and after the = .</name>
		<description>
&lt;h2 id="youneedaspacebeforeandafterthe"&gt;You need a space before and after the = .&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ "$var"= 2 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;[ "$var" = 2 ]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You appear to be missing the space on the left side of the operator. Shell in general, and &lt;code&gt;[&lt;/code&gt; in particular, is space sensitive. Operators and operands must be separate tokens. &lt;/p&gt;

&lt;p&gt;Please ensure that the operator, like the &lt;code&gt;=&lt;/code&gt; in the example, has a space both before and after it.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None. If you're comparing values in C style reverse order like &lt;code&gt;[ -eq == $1 ]&lt;/code&gt;, use quotes: &lt;code&gt;[ "-eq" == "$1" ]&lt;/code&gt;. Also, it's pointless since &lt;code&gt;[ a = b ]&lt;/code&gt; doesn't assign.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1109</key>
		<name>SC1109 - This is an unquoted HTML entity. Replace with corresponding character.</name>
		<description>
&lt;h2 id="thisisanunquotedhtmlentityreplacewithcorrespondingcharacter"&gt;This is an unquoted HTML entity. Replace with corresponding character.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo &amp;amp;amp;&amp;amp;amp; bar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;foo &amp;amp;&amp;amp; bar
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;There is an unquoted HTML entity, such as &lt;code&gt;&amp;amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;amp;gt;&lt;/code&gt; or &lt;code&gt;&amp;amp;lt;&lt;/code&gt; (instead of &lt;code&gt;&amp;amp;&lt;/code&gt;, &lt;code&gt;&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;&lt;/code&gt;) in your code. This usually happens when copy-pasting from a web site that has mismanaged its code formatting.&lt;/p&gt;

&lt;p&gt;You should go through the entire script and replace HTML entities with their corresponding characters. &lt;/p&gt;

&lt;p&gt;Don't rely on ShellCheck to detect all of them. ShellCheck only warns about certain cases in certain contexts, while this issue tends to affect the entire script.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you want to run a command called &lt;code&gt;amp&lt;/code&gt; after backgrounding another command, add a space: &lt;code&gt;foo &amp;amp; amp;&lt;/code&gt;.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1110</key>
		<name>SC1110 - This is a unicode quote. Delete and retype it (or quote to make literal).</name>
		<description>
&lt;h2 id="thisisaunicodequotedeleteandretypeitorquotetomakeliteral"&gt;This is a unicode quote. Delete and retype it (or quote to make literal).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo โhello worldโ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'hello world'
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Some software, like OS X, Word and WordPress, may automatically replace your regular quotes with slanted Unicode quotes. Try deleting and retyping them, and/or disable โsmart quotesโ in your editor or OS.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you want to use typographic single quotes, you can put them in double quotes (or typographic double quotes in single quotes) to make shellcheck ignore them, e.g.,&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf "Warning: โwakeonlanโ is not installed.\n"
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1111</key>
		<name>SC1111 - This is a unicode quote. Delete and retype it (or ignore/singlequote for literal).</name>
		<description>
&lt;h2 id="thisisaunicodequotedeleteandretypeitorignoresinglequoteforliteral"&gt;This is a unicode quote. Delete and retype it (or ignore/singlequote for literal).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "hello worldโ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo "hello world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;Some software, like OS X, Word and WordPress, may automatically replace your regular quotes with slanted Unicode quotes. The shell does not recognize these quotes and will not respect them.&lt;/p&gt;

&lt;p&gt;In this case, you have slanted double quotes in a double quoted string. Try deleting and retyping them, and/or disable โsmart quotesโ in your editor or OS.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

&lt;p&gt;If you want to use literal slanted double quotes for typographic reasons, you can put them in single quotes to make ShellCheck ignore them:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf 'Warning: โwakeonlanโ is not installed.\n'
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can also just &lt;a href="https://github.com/koalaman/shellcheck/wiki/Ignore"&gt;ignore&lt;/a&gt; this warning.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1112</key>
		<name>SC1112 - This is a unicode quote. Delete and retype it (or ignore/doublequote for literal).</name>
		<description>
			&lt;h2 id="thisisaunicodequotedeleteandretypeitorignoredoublequoteforliteral"&gt;This is a unicode quote. Delete and retype it (or ignore/doublequote for literal).&lt;/h2&gt;

			&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

			&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'hello worldโ
			&lt;/code&gt;&lt;/pre&gt;

			&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

			&lt;pre&gt;&lt;code class="sh language-sh"&gt;echo 'hello world'
			&lt;/code&gt;&lt;/pre&gt;

			&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

			&lt;p&gt;Some software, like OS X, Word and WordPress, may automatically replace your regular quotes with slanted Unicode quotes. The shell does not recognize these quotes and will not respect them.&lt;/p&gt;

			&lt;p&gt;In this case, you have slanted single quotes in a single quoted string. Try deleting and retyping them, and/or disable โsmart quotesโ in your editor or OS.&lt;/p&gt;

			&lt;h3 id="exceptions"&gt;Exceptions&lt;/h3&gt;

			&lt;p&gt;If you want to use literal slanted single quotes for typographic reasons, you can put them in double quotes to make ShellCheck ignore them:&lt;/p&gt;

			&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf "Warning: โwakeonlanโ is not installed.\\n"
			&lt;/code&gt;&lt;/pre&gt;

			&lt;p&gt;You can also just &lt;a href="https://github.com/koalaman/shellcheck/wiki/Ignore"&gt;ignore&lt;/a&gt; this warning.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1113</key>
		<name>SC1113 - Use #!, not just #, for the shebang.</name>
		<description>
&lt;h2 id="usenotjustfortheshebang"&gt;Use #!, not just #, for the shebang.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# /bin/bash
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#! /bin/bash
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You appear to be specifying a shebang, but missing the bang (i.e. &lt;code&gt;!&lt;/code&gt;). The shebang should always be on the form &lt;code&gt;#!/path/shell&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1114</key>
		<name>SC1114 - Remove leading spaces before the shebang.</name>
		<description>
&lt;h2 id="removeleadingspacesbeforetheshebang"&gt;Remove leading spaces before the shebang.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;  #!/bin/sh
echo "Hello world"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#!/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The script has leading spaces before the shebang (&lt;code&gt;#!&lt;/code&gt;). This is not allowed. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;#!&lt;/code&gt; should be the first two bytes in the file, as they're used as a file signature by the OS to determine whether a file is a script.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1115</key>
		<name>SC1115 - Remove spaces between # and ! in the shebang.</name>
		<description>
&lt;h2 id="removespacesbetweenandintheshebang"&gt;Remove spaces between # and ! in the shebang.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;# !/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;#!/bin/sh
echo "Hello World"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The script has spaces between the &lt;code&gt;#&lt;/code&gt; and &lt;code&gt;!&lt;/code&gt; in the shebang. This is not valid.&lt;/p&gt;

&lt;p&gt;Remove the spaces so the OS can correctly recognize the file as a script.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1116</key>
		<name>SC1116 - Missing $ on a $((..)) expression? (or use ( ( for arrays).</name>
		<description>
&lt;h2 id="missingdonadexpressionoruseforarrays"&gt;Missing $ on a $((..)) expression? (or use ( ( for arrays).&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=((foo+1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=$((foo+1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;You appear to be missing the &lt;code&gt;$&lt;/code&gt; on an assignment from an arithmetic expression &lt;code&gt;var=$((..))&lt;/code&gt; .&lt;/p&gt;

&lt;p&gt;Without the &lt;code&gt;$&lt;/code&gt;, this is an array expression which is either nested (ksh) or invalid (bash). &lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;If you are trying to define a multidimensional Ksh array, add spaces between the &lt;code&gt;( (&lt;/code&gt; to clarify:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var=( (1 2 3) (4 5 6) )
&lt;/code&gt;&lt;/pre&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1117</key>
		<name>SC1117 - Backslash is literal in &lt;code&gt;"\n"&lt;/code&gt;. Prefer explicit escaping: &lt;code&gt;"\\n"&lt;/code&gt;.</name>
		<description>
&lt;h2 id="backslashisliteralinnpreferexplicitescapingn"&gt;Backslash is literal in &lt;code&gt;"\n"&lt;/code&gt;. Prefer explicit escaping: &lt;code&gt;"\\n"&lt;/code&gt;.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note: this warning has been retired due to being too pedantic&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf "%s\n" "Hello"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;p&gt;a&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf "%s\\n" "Hello"
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or alternatively, with single quotes:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;printf '%s\n' "Hello"
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;In a double quoted string, you have escaped a character that has no special behavior when escaped. Instead, it's invoking the fallback behavior of being interpreted literally.&lt;/p&gt;

&lt;p&gt;Instead of relying on this implicit fallback, you should escape the backslash explicitly. This makes it clear that it's meant to be passed as a literal backslash in the string parameter.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None. This is a stylistic issue which can be [[ignore]]d. But can you name the 5 characters that &lt;em&gt;are&lt;/em&gt; special when escaped in double quotes?&lt;/p&gt;

&lt;h3 id="retired"&gt;Retired:&lt;/h3&gt;

&lt;p&gt;This warning is no longer emitted as of d8a32da07 (strictly after v0.5).&lt;/p&gt;

&lt;p&gt;The number of harmlessly affected &lt;code&gt;printf&lt;/code&gt;, &lt;code&gt;sed&lt;/code&gt; and &lt;code&gt;grep&lt;/code&gt; statements was significantly higher than the number of actual unexpanded escape sequences. It may return some day under a &lt;code&gt;-pedantic&lt;/code&gt; type flag.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1118</key>
		<name>SC1118 - Delete whitespace after the here-doc end token.</name>
		<description>
&lt;h2 id="deletewhitespaceaftertheheredocendtoken"&gt;Delete whitespace after the here-doc end token.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;p&gt;"โญ" below indicates an otherwise invisible space:&lt;/p&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; "eof"
Hello
eofโญ
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; "eof"
Hello
eof
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The end token of your here document has trailing whitespace. This is invisible to the naked eye, but shells do not accept it.&lt;/p&gt;

&lt;p&gt;Remove the trailing whitespace.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None.&lt;/p&gt;
		</description>
		<severity>BLOCKER</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1119</key>
		<name>SC1119 - Add a linefeed between end token and terminating ')'.</name>
		<description>
&lt;h2 id="addalinefeedbetweenendtokenandterminating"&gt;Add a linefeed between end token and terminating ')'.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=$(fmt -s "$COLUMNS" &amp;lt;&amp;lt; "eof"
This is a bunch of text
eof)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;var=$(fmt -s "$COLUMNS" &amp;lt;&amp;lt; "eof"
This is a bunch of text
eof
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;When embedding a here document in &lt;code&gt;$(..)&lt;/code&gt; or &lt;code&gt;(..)&lt;/code&gt;, there needs to be a linefeed (newline) between the here doc token and the closing &lt;code&gt;)&lt;/code&gt;. Please insert one.&lt;/p&gt;

&lt;p&gt;Failing to do so may cause warnings like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bash: warning: here-document at line 15 delimited by end-of-file (wanted `eof')`
dash: 5: Syntax error: end of file unexpected (expecting ")")
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;This error may be incorrectly emitted for &lt;code&gt;ksh&lt;/code&gt;, where this is allowed. In this case, please either write it in a standard way or ignore this warning.&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>BUG</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>5min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1120</key>
		<name>SC1120 - No comments allowed after here-doc token. Comment the next line instead.</name>
		<description>
&lt;h2 id="nocommentsallowedafterheredoctokencommentthenextlineinstead"&gt;No comments allowed after here-doc token. Comment the next line instead.&lt;/h2&gt;

&lt;h3 id="problematiccode"&gt;Problematic code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; eof  # --- Start greeting --
Hello
eof         # --- End greeting ---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="correctcode"&gt;Correct code:&lt;/h3&gt;

&lt;pre&gt;&lt;code class="sh language-sh"&gt;cat &amp;lt;&amp;lt; eof  # --- Start greeting --
Hello
eof
# --- End greeting ---
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id="rationale"&gt;Rationale:&lt;/h3&gt;

&lt;p&gt;The terminator token for a here document must be on an entirely separate line. No comments are allowed on this line.&lt;/p&gt;

&lt;p&gt;Place the comment somewhere else, such as on the following line.&lt;/p&gt;

&lt;h3 id="exceptions"&gt;Exceptions:&lt;/h3&gt;

&lt;p&gt;None&lt;/p&gt;
		</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1121</key>
		<name>ShellCheck.SC1121</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1122</key>
		<name>ShellCheck.SC1122</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1123</key>
		<name>ShellCheck.SC1123</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1124</key>
		<name>ShellCheck.SC1124</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1126</key>
		<name>ShellCheck.SC1126</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1127</key>
		<name>ShellCheck.SC1127</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC1128</key>
		<name>ShellCheck.SC1128</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2001</key>
		<name>ShellCheck.SC2001</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2002</key>
		<name>ShellCheck.SC2002</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2003</key>
		<name>ShellCheck.SC2003</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2004</key>
		<name>ShellCheck.SC2004</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2005</key>
		<name>ShellCheck.SC2005</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2006</key>
		<name>ShellCheck.SC2006</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2007</key>
		<name>ShellCheck.SC2007</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2008</key>
		<name>ShellCheck.SC2008</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2009</key>
		<name>ShellCheck.SC2009</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2010</key>
		<name>ShellCheck.SC2010</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2012</key>
		<name>ShellCheck.SC2012</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2013</key>
		<name>ShellCheck.SC2013</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2014</key>
		<name>ShellCheck.SC2014</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2015</key>
		<name>ShellCheck.SC2015</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2016</key>
		<name>ShellCheck.SC2016</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2017</key>
		<name>ShellCheck.SC2017</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2018</key>
		<name>ShellCheck.SC2018</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2019</key>
		<name>ShellCheck.SC2019</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2020</key>
		<name>ShellCheck.SC2020</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2021</key>
		<name>ShellCheck.SC2021</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2022</key>
		<name>ShellCheck.SC2022</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2024</key>
		<name>ShellCheck.SC2024</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2025</key>
		<name>ShellCheck.SC2025</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2026</key>
		<name>ShellCheck.SC2026</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2027</key>
		<name>ShellCheck.SC2027</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2028</key>
		<name>ShellCheck.SC2028</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2029</key>
		<name>ShellCheck.SC2029</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2030</key>
		<name>ShellCheck.SC2030</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2031</key>
		<name>ShellCheck.SC2031</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2032</key>
		<name>ShellCheck.SC2032</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2033</key>
		<name>ShellCheck.SC2033</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2034</key>
		<name>ShellCheck.SC2034</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2035</key>
		<name>ShellCheck.SC2035</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2036</key>
		<name>ShellCheck.SC2036</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2037</key>
		<name>ShellCheck.SC2037</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2038</key>
		<name>ShellCheck.SC2038</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2039</key>
		<name>ShellCheck.SC2039</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2040</key>
		<name>ShellCheck.SC2040</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2041</key>
		<name>ShellCheck.SC2041</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2043</key>
		<name>ShellCheck.SC2043</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2044</key>
		<name>ShellCheck.SC2044</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2045</key>
		<name>ShellCheck.SC2045</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2046</key>
		<name>ShellCheck.SC2046</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2048</key>
		<name>ShellCheck.SC2048</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2050</key>
		<name>ShellCheck.SC2050</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2051</key>
		<name>ShellCheck.SC2051</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2053</key>
		<name>ShellCheck.SC2053</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2054</key>
		<name>ShellCheck.SC2054</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2055</key>
		<name>ShellCheck.SC2055</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2056</key>
		<name>ShellCheck.SC2056</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2057</key>
		<name>ShellCheck.SC2057</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2059</key>
		<name>ShellCheck.SC2059</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2060</key>
		<name>ShellCheck.SC2060</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2061</key>
		<name>ShellCheck.SC2061</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2062</key>
		<name>ShellCheck.SC2062</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2063</key>
		<name>ShellCheck.SC2063</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2064</key>
		<name>ShellCheck.SC2064</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2065</key>
		<name>ShellCheck.SC2065</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2066</key>
		<name>ShellCheck.SC2066</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2067</key>
		<name>ShellCheck.SC2067</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2068</key>
		<name>ShellCheck.SC2068</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2069</key>
		<name>ShellCheck.SC2069</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2070</key>
		<name>ShellCheck.SC2070</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2071</key>
		<name>ShellCheck.SC2071</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2072</key>
		<name>ShellCheck.SC2072</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2074</key>
		<name>ShellCheck.SC2074</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2076</key>
		<name>ShellCheck.SC2076</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2077</key>
		<name>ShellCheck.SC2077</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2078</key>
		<name>ShellCheck.SC2078</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2081</key>
		<name>ShellCheck.SC2081</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2082</key>
		<name>ShellCheck.SC2082</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2084</key>
		<name>ShellCheck.SC2084</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2086</key>
		<name>ShellCheck.SC2086</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2087</key>
		<name>ShellCheck.SC2087</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2088</key>
		<name>ShellCheck.SC2088</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2089</key>
		<name>ShellCheck.SC2089</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2090</key>
		<name>ShellCheck.SC2090</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2091</key>
		<name>ShellCheck.SC2091</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2092</key>
		<name>ShellCheck.SC2092</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2094</key>
		<name>ShellCheck.SC2094</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2095</key>
		<name>ShellCheck.SC2095</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2096</key>
		<name>ShellCheck.SC2096</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2097</key>
		<name>ShellCheck.SC2097</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2098</key>
		<name>ShellCheck.SC2098</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2101</key>
		<name>ShellCheck.SC2101</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2103</key>
		<name>ShellCheck.SC2103</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2104</key>
		<name>ShellCheck.SC2104</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2105</key>
		<name>ShellCheck.SC2105</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2107</key>
		<name>ShellCheck.SC2107</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2108</key>
		<name>ShellCheck.SC2108</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2109</key>
		<name>ShellCheck.SC2109</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2110</key>
		<name>ShellCheck.SC2110</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2112</key>
		<name>ShellCheck.SC2112</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2114</key>
		<name>ShellCheck.SC2114</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2115</key>
		<name>ShellCheck.SC2115</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2116</key>
		<name>ShellCheck.SC2116</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2117</key>
		<name>ShellCheck.SC2117</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2119</key>
		<name>ShellCheck.SC2119</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2120</key>
		<name>ShellCheck.SC2120</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2121</key>
		<name>ShellCheck.SC2121</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2122</key>
		<name>ShellCheck.SC2122</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2123</key>
		<name>ShellCheck.SC2123</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2124</key>
		<name>ShellCheck.SC2124</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2125</key>
		<name>ShellCheck.SC2125</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2126</key>
		<name>ShellCheck.SC2126</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2128</key>
		<name>ShellCheck.SC2128</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2129</key>
		<name>ShellCheck.SC2129</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2130</key>
		<name>ShellCheck.SC2130</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2139</key>
		<name>ShellCheck.SC2139</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2140</key>
		<name>ShellCheck.SC2140</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2141</key>
		<name>ShellCheck.SC2141</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2142</key>
		<name>ShellCheck.SC2142</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2143</key>
		<name>ShellCheck.SC2143</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2144</key>
		<name>ShellCheck.SC2144</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2145</key>
		<name>ShellCheck.SC2145</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2146</key>
		<name>ShellCheck.SC2146</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2147</key>
		<name>ShellCheck.SC2147</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2148</key>
		<name>ShellCheck.SC2148</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2149</key>
		<name>ShellCheck.SC2149</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2150</key>
		<name>ShellCheck.SC2150</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2151</key>
		<name>ShellCheck.SC2151</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2152</key>
		<name>ShellCheck.SC2152</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2153</key>
		<name>ShellCheck.SC2153</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2154</key>
		<name>ShellCheck.SC2154</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2155</key>
		<name>ShellCheck.SC2155</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2156</key>
		<name>ShellCheck.SC2156</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2157</key>
		<name>ShellCheck.SC2157</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2158</key>
		<name>ShellCheck.SC2158</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2159</key>
		<name>ShellCheck.SC2159</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2160</key>
		<name>ShellCheck.SC2160</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2161</key>
		<name>ShellCheck.SC2161</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2162</key>
		<name>ShellCheck.SC2162</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2163</key>
		<name>ShellCheck.SC2163</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2164</key>
		<name>ShellCheck.SC2164</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2165</key>
		<name>ShellCheck.SC2165</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2166</key>
		<name>ShellCheck.SC2166</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2167</key>
		<name>ShellCheck.SC2167</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2168</key>
		<name>ShellCheck.SC2168</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2169</key>
		<name>ShellCheck.SC2169</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2170</key>
		<name>ShellCheck.SC2170</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2172</key>
		<name>ShellCheck.SC2172</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2173</key>
		<name>ShellCheck.SC2173</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2174</key>
		<name>ShellCheck.SC2174</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2175</key>
		<name>ShellCheck.SC2175</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2176</key>
		<name>ShellCheck.SC2176</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2177</key>
		<name>ShellCheck.SC2177</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2178</key>
		<name>ShellCheck.SC2178</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2179</key>
		<name>ShellCheck.SC2179</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2180</key>
		<name>ShellCheck.SC2180</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2181</key>
		<name>ShellCheck.SC2181</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2182</key>
		<name>ShellCheck.SC2182</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2183</key>
		<name>ShellCheck.SC2183</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2184</key>
		<name>ShellCheck.SC2184</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2185</key>
		<name>ShellCheck.SC2185</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2186</key>
		<name>ShellCheck.SC2186</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2187</key>
		<name>ShellCheck.SC2187</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2188</key>
		<name>ShellCheck.SC2188</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2189</key>
		<name>ShellCheck.SC2189</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2190</key>
		<name>ShellCheck.SC2190</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2191</key>
		<name>ShellCheck.SC2191</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2192</key>
		<name>ShellCheck.SC2192</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2193</key>
		<name>ShellCheck.SC2193</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2194</key>
		<name>ShellCheck.SC2194</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2195</key>
		<name>ShellCheck.SC2195</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2196</key>
		<name>ShellCheck.SC2196</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2197</key>
		<name>ShellCheck.SC2197</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2198</key>
		<name>ShellCheck.SC2198</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2199</key>
		<name>ShellCheck.SC2199</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2200</key>
		<name>ShellCheck.SC2200</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2201</key>
		<name>ShellCheck.SC2201</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2202</key>
		<name>ShellCheck.SC2202</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2203</key>
		<name>ShellCheck.SC2203</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2204</key>
		<name>ShellCheck.SC2204</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2205</key>
		<name>ShellCheck.SC2205</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2206</key>
		<name>ShellCheck.SC2206</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2207</key>
		<name>ShellCheck.SC2207</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2208</key>
		<name>ShellCheck.SC2208</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2209</key>
		<name>ShellCheck.SC2209</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2210</key>
		<name>ShellCheck.SC2210</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2211</key>
		<name>ShellCheck.SC2211</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2212</key>
		<name>ShellCheck.SC2212</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2213</key>
		<name>ShellCheck.SC2213</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2214</key>
		<name>ShellCheck.SC2214</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2215</key>
		<name>ShellCheck.SC2215</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2216</key>
		<name>ShellCheck.SC2216</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2217</key>
		<name>ShellCheck.SC2217</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2218</key>
		<name>ShellCheck.SC2218</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2219</key>
		<name>ShellCheck.SC2219</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2220</key>
		<name>ShellCheck.SC2220</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2221</key>
		<name>ShellCheck.SC2221</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2222</key>
		<name>ShellCheck.SC2222</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2223</key>
		<name>ShellCheck.SC2223</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2224</key>
		<name>ShellCheck.SC2224</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2225</key>
		<name>ShellCheck.SC2225</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2226</key>
		<name>ShellCheck.SC2226</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2227</key>
		<name>ShellCheck.SC2227</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2228</key>
		<name>ShellCheck.SC2228</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2229</key>
		<name>ShellCheck.SC2229</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>
	<rule>
		<key>ShellCheck.SC2230</key>
		<name>ShellCheck.SC2230</name>
		<description>TO DEFINE</description>
		<severity>MAJOR</severity>
		<cardinality>SINGLE</cardinality>
		<status>READY</status>
		<type>CODE_SMELL</type>
		<remediationFunction>CONSTANT_ISSUE</remediationFunction>
		<remediationFunctionBaseEffort>30min</remediationFunctionBaseEffort>
	</rule>

</shellchecklint-rules>